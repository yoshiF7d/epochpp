<NAME>Replace</NAME>
<PRECEDENCE>670</PRECEDENCE>
<ATTRIBUTES>Locked|Protected</ATTRIBUTES>
<PROTO>
extern int message_flag;
int mark(Expr expr, Expr pattern, Expr head, int callback);
Expr Replace(Expr expr);
Expr Replace_mod(Expr expr, Expr rules, int ls, int le);
Expr Replace_mod_mod(Expr expr, Expr pat, Expr rep, int level, int ls, int le);
Expr Replace_copy_mod(Expr list, Expr rep);
Expr Replace_makelist(Expr root, Expr pat);
</PROTO>
<SOURCE>
Expr Replace(Expr expr){
	Expr e,child=expr->child,rules,lspc;
	int ls=0,le=0;
	if(!child){return expr;}
	rules = child->next;
	if(!rules){goto argbu;}	
	lspc = rules->next;
	if(lspc){
		switch(lspc->symbol->id){
		  case id_Integer:
			if(!(lspc->flag & ef_full)){
				ls = 1;
				le = Integer_toInt(lspc);
			}else{goto lev;}
			break;
		  case id_List:
			if(lspc->child){
				if(!lspc->child->next){
					if(!(lspc->child->flag & ef_full)){
						ls = le = Integer_toInt(lspc->child);
					}else{goto lev;}
				}else{
					if(!(lspc->child->flag & ef_full) && !(lspc->child->next->flag & ef_full)){
						ls = Integer_toInt(lspc->child);
						le = Integer_toInt(lspc->child);
					}else{goto lev;}
				}
			}
			break;
		  case id_Infinity:
			ls = 1;
			le = -1;
			break;
		  case id_Rule:
			
		  default:
			break;
		}
	}
	Expr_replace(expr,child=Replace_mod(child,rules,ls,le));
	for(e=rules;e;e=e->next){Expr_deleteRoot(e);}
	Expr_delete(expr);
	//TreeForm_mod(child);
	return Evaluate(child);
  argbu:
	if(message_flag){
		fprintf(stderr,"Replace::argbu: Replace called with 1 argument; between 2 and 4 arguments are expected.\n");
	}
	return expr;
  lev:
	if(message_flag){
		fprintf(stderr,"level: Level specification is not of the form n, {n}, or {m, n}.\n");
	}
	return expr;
}
Expr Replace_mod(Expr expr, Expr rules, int ls, int le){
	Expr r,pat,rep;
	int i;
	if(!rules){return expr;}
	if(rules->symbol->id == id_List){
		for(r=rules->child;r;r=r->next){
			expr = Replace_mod(expr,r,ls,le);
		}
		return expr;
	}
	if(Expr_getLength(rules->child)!=2){return expr;}
	pat = rules->child;
	rep = rules->child->next;
	expr = Replace_mod_mod(expr,pat,rep,0,ls,le);
	return expr;
}
Expr Replace_mod_mod(Expr expr, Expr pat, Expr rep, int level, int ls, int le){
	Expr e,cpy,list=NULL;
	if(level < ls){goto gochild;}
	if(le > 0){
		if(level > le){return expr;}
	}
	if(mark(expr,pat,NULL,0)==mqr_match){
		Expr_replace(expr,cpy=Replace_copy_mod(list=Replace_makelist(list,pat),rep));
		Expr_deleteRoot(expr);
		for(e=list;e;e=e->next){Expr_delete(e);}
		expr = cpy;
	}else{
		unmark(expr);
	  gochild:
		for(e=expr->child;e;e=e->next){
			e = Replace_mod_mod(e,pat,rep,level+1,ls,le);
		}
	}
	return expr;
}

Expr Replace_makelist(Expr root, Expr pat){
	Expr e;
	if(pat->symbol->id == id_Pattern){
		if(root){
			for(e=root;e;e=e->next){
				if(e->symbol==pat->data.pattern.object->symbol){goto gochild;}
			}
		}
		root = Expr_append(root,Expr_copy(pat));
	}
  gochild:
	for(e=pat->child;e;e=e->next){
		root = Replace_makelist(root,e);
	}
	return root;
}

Expr Replace_copy_mod(Expr list, Expr rep){
	Expr root=NULL,e,p,r;
	for(e=list;e;e=e->next){
		if(e->data.pattern.symbol == rep->symbol){
			if(!root){root = Expr_create(id_Sequence);}
			for(p=e->data.pattern.capture;p;p=p->next){
				if(rep->child){
					root=Expr_appendChild(root,Expr_copy(p->data.expr));
				}else{
					root=Expr_appendChild(root,Expr_copyRoot(p->data.expr));
				}
			}
		}
	}
	if(!root){
		root=Expr_copy(rep);
		for(r=rep->child;r;r=r->next){
			Expr_appendChild(root,Replace_copy_mod(list,r));
		}
	}
	return root;
}
</SOURCE>
<DOC>
Replace[expr,rules] applies a rule or list of rules in an attempt to transform the entire expression expr.
Replace[expr,rules,levelspec] applies rules to parts of expr specified by levelspec.
</DOC>