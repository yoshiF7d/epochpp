<NAME>Flatten</NAME>
<PRECEDENCE>670</PRECEDENCE>
<ATTRIBUTES>Protected</ATTRIBUTES>
<PROTO>
extern int message_flag;
Expr Flatten_mod(Expr expr, Symbol head, int level, int levelmax);
Expr Flatten(Expr expr);
</PROTO>
<SOURCE>
Expr Flatten(Expr expr){
	Expr e,child;
	int arglen,levelmax=-1;
	Symbol head;
	
	if(!expr->child){return expr;}
	arglen = Expr_getLength(expr->child);
	if(arglen>3){return expr;}
	if(arglen>=2){
		e=Expr_getChild(expr,1);
		if(e->symbol->id!=id_Integer || Integer_sign(e)<0){
			goto flev;
		}
		levelmax = Integer_toInt(e);
	}
	if(arglen==3){
		e=Expr_getChild(expr,2);
		head = e->symbol;
	}
	expr->child = Flatten_mod(expr->child,head,0,levelmax);
	for(e=expr->child->next;e;e=e->next){Expr_deleteRoot(e);}
	Expr_replace(expr,child=expr->child);
	Expr_delete(expr);
	return child;
  flev:
	if(message_flag){
		fprintf(stderr,"Flatten::flev:\nThe level argument in position 2 of Flatten should be a non-negative integer or\nInfinity giving the level to flatten through.\n");
	}
	return expr;
}
Expr Flatten_mod(Expr expr, Symbol head, int level, int levelmax){
	Expr e,ee;
	Symbol myhead;
	
	myhead = expr->symbol;
	if(!head){head = myhead;}
	
	if(levelmax<0 || level<levelmax){	
		for(e=expr->child;e;e=e->next){
			if(e->child){
				e=Flatten_mod(e,head,level+1,levelmax);
				if(head==e->symbol && head==myhead){
					Expr_replacelist(e,ee=e->child);
					Expr_delete(e);
					e=ee;
				}
			}
		}
	}
	return expr;
}
</SOURCE>
<DOC>
flattens out nested lists.
</DOC>