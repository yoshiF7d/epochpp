<NAME>SetDelayed</NAME>
<ALIAS>{遅延設定}</ALIAS>
<PRECEDENCE>40</PRECEDENCE>
<ASSOCIATIVITY>bi_right</ASSOCIATIVITY>
<SIGN>":="</SIGN>
<ATTRIBUTES>HoldAll|Protected|SequenceHold</ATTRIBUTES>
<PROTO>
Expr SetDelayed(Expr expr);
</PROTO>
<SOURCE>
Expr SetDelayed(Expr expr){
	Expr e,next,rtn;
	if(!expr->child){return expr;}
	if(!expr->child->next){return expr;}
	if(!AtomQ_mod(expr->child)){
		if(expr->child->symbol->attributes & Protected){
			fprintf(stderr,"SetDelayed::wrsym: symbol %s is protected\n",expr->child->symbol->name);
			return expr;
		}
		if(expr->child->symbol->assigned){
			for(e=expr->child->symbol->assigned;e;e=e->next){
				if(e->symbol->id != id_Rule){
					fprintf(stderr,"symbol->assigned supposed to have list of rules.\n");
				}
				if(SameQ_mod(expr->child,e->child)){
					Expr_deleteRoot(e->child->next);
					e->child->next=NULL;
					Expr_appendChild(e,Expr_copyRoot(expr->child->next));
					goto end;
				}
			}
		}
		expr->child->symbol->assigned = 
			Expr_append(expr->child->symbol->assigned,
				Expr_appendChild(
					Expr_create(id_Rule),
					Expr_append(Expr_copyRoot(expr->child),Expr_copyRoot(expr->child->next))
				)
			);
	  end:
		Expr_deleteRoot(expr);
		expr = Expr_create(id_Null);
	}else{
		fprintf(stderr,"SetDelayed::setraw: Cannot assign to raw object\n");
	}
	return expr;
}
</SOURCE>
<DOC>
From then on, lhs is replaced by rhs whenever it appears.
{l1,l2,...} := {r1,r2,...} evaluates the ri, and assigns the results to be the values of the corresponding li.
</DOC>
