<NAME>Column</NAME>
<ALIAS>{åˆ—}</ALIAS>
<PRECEDENCE>670</PRECEDENCE>
<ATTRIBUTES>Protected</ATTRIBUTES>
<PROTO>
Expr Column_mod(Expr expr, int alignment, int spacing);
Expr Column(Expr expr);
typedef struct st_form *Form;
Form Form_appendVertical(Form form, Form form2);
Form Form_appendVerticalCenter(Form form, Form form2);
Form Form_appendVerticalRight(Form form, Form form2);
Form Form_make(Expr expr, int flag);

</PROTO>
<SOURCE>
Expr Column(Expr expr){
	Expr child = expr->child;
	int alignment=0,spacing=0;
	if(!child){return expr;}
	if(child->symbol->id != id_List){return expr;}
	if(child->next){
		switch(child->next->symbol->id){
		  case id_Left:
			alignment = -1;
			break;
		  case id_Right:
			alignment = 1;
			break;
		  default:
			break;
		}
		if(child->next->next){
			if(child->next->next->symbol->id == id_Integer){
				spacing = Integer_toInt(child->next->next);
			}
		}
	}
	Column_mod(child,alignment,spacing);
	output_flag = 0;
	return expr;
}
Expr Column_mod(Expr expr,int alignment, int spacing){
	Expr e;
	Form f=NULL;
	Form (*appendVertical)(Form,Form);
	if(alignment < 0){
		appendVertical = Form_appendVertical;
	}else if(alignment > 0){
		appendVertical = Form_appendVerticalRight;
	}else{
		appendVertical = Form_appendVerticalCenter;
	}
	for(e=expr->child;e;e=e->next){
		f = appendVertical(f,Form_make(e,0));
		if(spacing){f=appendVertical(f,Form_create(repeatedString(' ',spacing)));}
	}
	Form_print(f);
	Form_delete(f);
	return expr;
}
</SOURCE>
<DOC>
Column[{expr1,expr2,...}] is an object that formats with the expri arranged in a column, with expr1 above expr2, etc.
Column[list,alignment] aligns each element horizontally in the specified way.
Column[list,alignmanet,spacing] leaves the specified number of x-heights of spacing between successive elements.
</DOC>
