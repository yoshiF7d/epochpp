<NAME>Times</NAME>
<ALIAS>{乗算}</ALIAS>
<PRECEDENCE>400</PRECEDENCE>
<ASSOCIATIVITY>bi_none</ASSOCIATIVITY>
<SIGN>"*"</SIGN>
<ATTRIBUTES>Flat | Listable | NumericFunction | OneIdentity | Orderless | Protected</ATTRIBUTES>
<PROTO>
extern int ofp_times;
Expr Times(Expr expr);
void Times_mod(Expr *e, Expr e1, Expr e2);
void coeff3(Expr expr, Expr *v, Expr *e);
</PROTO>
<SOURCE>
#define DELETE_AND_PROCEED(p,e) \
if(e->previous){\
e->previous->next=e->next;\
prev=e->previous;\
if(e->next){e->next->previous=prev;}\
}else{\
prev=p->child=e->next;\
if(prev){e->next->previous=NULL;}\
else{perror("DELETE_AND_PROCEED : error\n");}\
}\
Expr_deleteRoot(e);\
e=prev

Expr Times(Expr expr){
	Expr prev,e,e2,last;
	Expr ei=NULL,ei32=NULL,er=NULL,er64=NULL;
	Expr es=NULL,xt=NULL,vs=NULL,xs=NULL,v=NULL,x=NULL;
	
	int i;
	int flag=0;
	long prec=0;
	if(!expr->child){return expr;}
	
	for(e=expr->child;e;e=e->next){
		//puts("==12");
		switch(e->symbol->id){
		  case id_Integer:
			if(e->data.INT_PREC <= I32_LIMIT){
				prec+=(int)fabs(log2(fabs((double)e->data.INT_MP)));
				if(prec > I32_LIMIT){
					/*overflow danger*/
					if(ei){
						mpz_mul_si(ei->data.INT_AP,ei->data.INT_AP,ei32->data.INT_MP);
						Expr_deleteChild(expr,ei32);
					}
					else{
						i=ei32->data.INT_MP;
						ei32->data.INT_PREC=prec;
						mpz_init_set_si(ei32->data.INT_AP,i);
						ei=ei32;
					}
					ei32=NULL;
				}
				if(!ei32){ei32 = e;}
				else{
					ei32->data.INT_MP *= e->data.INT_MP;
					DELETE_AND_PROCEED(expr,e);
				}
			}else{
				if(!ei){ei = e;}
				else{
					mpz_mul(ei->data.INT_AP,ei->data.INT_AP,e->data.INT_AP);
					DELETE_AND_PROCEED(expr,e);
				}
			}
			break;
		  case id_Real:
			if(e->data.REAL_PREC <= R64_LIMIT){
				if(!er64){er64 = e;}
				else{
					er64->data.REAL_MP *= e->data.REAL_MP;
					DELETE_AND_PROCEED(expr,e);
				}
			}else{
				if(!er){er = e;}
				else{
					mpfr_mul(er->data.REAL_AP,er->data.REAL_AP,e->data.REAL_AP,MPFR_RNDN);
					DELETE_AND_PROCEED(expr,e);
				}
			}
			break;
		  default:
			break;
		}
	}
	
	Times_mod(&e,ei,ei32);
	Times_mod(&e,e,er64);
	Times_mod(&e,e,er);
	
	if(e!=ei){Expr_deleteChild(expr,ei); ei=NULL;}
	if(e!=ei32){Expr_deleteChild(expr,ei32); ei32=NULL;}
	if(e!=er){Expr_deleteChild(expr,er); er=NULL;}
	if(e!=er64){Expr_deleteChild(expr,er64); er64=NULL;}
	
	do{
		es = NULL; vs = NULL; xs = NULL; xt=NULL; flag = 0;
		for(e=expr->child;e;e=e->next){
			if(e->parent && !AtomQ_mod(e)){
				/*if e->parent == NULL e is already processed*/
				if(!es){
					/*vs <- variable*/
					/*xs <- exponent*/
					/*when e is set to "a^b"*/
					/*vs is set to "a"*/
					/*xs is set to "b"*/
					coeff3(e,&vs,&xs);
					es = e;
				}else{
					v=NULL;
					x=NULL;
					coeff3(e,&v,&x);
					/*if variable is not same as saved one, do nothing*/
					if(Order_mod(v,vs)!=0){continue;}
					flag=1;
					/*if variable is same as saved one, add exponents*/
					/*(a^b)*(a^c) -> a^(b+c)*/
					if(!xt){xt = Expr_create(id_Plus);}
					/*no exponent means exponent is one*/
					/*(a^b)*a -> a^(b+1)*/
					if(!x){x = Integer_createInt(1);}
					else{x = Expr_copyRoot(x);}
					Expr_appendChild(xt,x);
					/*delete e, variable is same as saved one and you only need exponents*/
					DELETE_AND_PROCEED(expr,e);
				}
			}
		}
		if(flag){
			if(xs){
				/*suppose (a^b)*(a^c)*/
				/*xs : "b"*/
				/*xt : "Plus[c]"*/
				/*e becomes Plus[b,c]*/
				Expr_replace(xs,xt);
				Expr_isolate(xs);
				e=Expr_appendChild(xt,xs);
			}else{
				xs = Expr_create(id_Power);
				Expr_replace(es,xs);
				es->next=NULL; es->previous=NULL;
				Expr_appendChild(xs,es);
				e = Expr_appendChild(xt,Integer_createInt(1));
				Expr_appendChild(es=xs,e);
			}
			e=Plus(e);
			/*mark processed leaf*/
			es->parent=NULL;
		}else if(es){
			es->parent=NULL;
		}else{
			/*erace mark*/
			for(e=expr->child;e;e=e->next){e->parent = expr;}
			break;
		}
	}while(1);
	
	if(expr->child->next){
		for(e=expr->child;e;e=e->next){
			switch(e->symbol->id){
			  case id_Integer:
				if(Integer_toInt(e)==1){
					DELETE_AND_PROCEED(expr,e);
				}else if(Integer_toInt(e)==0){
					e =  Integer_createInt(0);
					Expr_replace(expr,e);
					Expr_deleteRoot(expr);
					return e;
				}
				break;
			  case id_ComplexInfinity:
			  case id_Infinity:
				e = Expr_copy(e);
				Expr_replace(expr,e);
				Expr_deleteRoot(expr);
				return e;
			  default:
				break;
			}
		}
	}
	if(!expr->child->next){
		Expr_replace(expr,e=expr->child);
		Expr_delete(expr);
		expr=e;
	}
	return expr;
}

void Times_mod(Expr *e, Expr e1, Expr e2){
	if(!e1){*e = e2; return;}
	*e = e1;
	if(!e2){return;}
	Expr_cast(e1,e2);
	if(e1->symbol->id == id_Integer){
		if(e1->data.INT_PREC <= I32_LIMIT){
			e1->data.INT_MP *= e2->data.INT_MP;
		}else{
			mpz_mul(e1->data.INT_AP,e1->data.INT_AP,e2->data.INT_AP);
		}
	}else if(e1->symbol->id == id_Real){
		if(e1->data.REAL_PREC <= R64_LIMIT){
			e1->data.REAL_MP *= e2->data.REAL_MP;
		}else{
			mpfr_mul(e1->data.REAL_AP,e1->data.REAL_AP,e2->data.REAL_AP,MPFR_RNDN);
		}
	}
}

void coeff3(Expr expr, Expr *v, Expr *e){
	*v = expr; 
	*e = NULL;
	if(!expr){return;}
	if(expr->symbol->id==id_Power){
		*v = expr->child;
		*e = expr->child->next;
	}else if(expr->symbol->id != id_String){
		*v = expr;
		*e = NULL;
	}
	return;
}

</SOURCE>
<DOC>
x*y*z or x y z represents a product of terms.
</DOC>
