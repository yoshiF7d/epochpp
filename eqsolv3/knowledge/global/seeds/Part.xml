<NAME>Part</NAME>
<PRECEDENCE>670</PRECEDENCE>
<ATTRIBUTES>Locked|Protected</ATTRIBUTES>
<PROTO>
Expr Part(Expr expr);
Expr Part_mod(Expr rtn, Expr main , Expr spec, int *err);
</PROTO>
<SOURCE>
enum en_parterr{
	pe_noerr=0,
	pe_pspec=1,
	pe_partw=2,
	pe_partd=3,
	pe_head=4
};

Expr NodeToList(Expr e);
Expr Part(Expr expr){
	Expr e,p,m,r,rtn=NULL;
	char *buf;
	int k,err=0,slen,len,i,j,is,ie,incr;
	if(!expr->child){return expr;}
	if(!expr->child->next){
		Expr_replace(expr,e=expr->child);
		Expr_delete(expr);
		return e;
	}
	/*building tree in rtn*/
	rtn = Part_mod(Expr_create(id_Node),expr->child,expr->child->next,&err);
	if(err){goto part_err;}
	rtn = NodeToList(rtn);
	Expr_replace(expr,rtn);
	Expr_deleteRoot(expr);
	return rtn;
  part_err:
	Expr_deleteRoot(rtn);
	return expr;
}

Expr NodeToList(Expr e){
	Expr p;
	if(!e){return NULL;}
	for(p=e->child;p;p=p->next){
		p = NodeToList(p);
	}
	p = e;
	if(e->symbol->id == id_Node){
		if(e->child){
			if(e->child->next){
				e->symbol = SymbolTable_get(id_List);
				memset(&(e->data),0,sizeof(union un_data));
			}else{
				Expr_replace(e,p=e->child);
				Expr_delete(e);
			}
		}
	}
	return p;
}

#define NOTVALID(e,rtn) \
FullForm_mod2(stderr,e); \
fprintf(stderr,"is not valid Span specification\n"); \
goto part_mod_err

Expr Part_mod(Expr rtn, Expr main , Expr spec, int *err){
	Expr m;
	int i,is=1,ie,incr=1,len = Expr_getLength(main->child);
	
	if(spec->symbol->id == id_Span){
		if(spec->child){
			/*Span[i,...]*/
			if(spec->child->symbol->id != id_Integer){
				NOTVALID(spec->child,expr);
			}
			is = Integer_toInt(spec->child);
			if(spec->child->next){
				/*Span[i,j,...]*/
				if(spec->child->next->symbol->id == id_All){ie = Expr_getLength(spec->child);}
				if(spec->child->next->symbol->id != id_Integer){
					NOTVALID(spec->child->next,expr);
				}
				else{ie = Integer_toInt(spec->child->next);}
				if(spec->child->next->next){
					/*Span[i,j,k]*/
					if(spec->child->next->symbol->id != id_Integer){NOTVALID(spec->child->next->next,expr);}
					incr = Integer_toInt(spec->child->next->next);
				}
			}else{
				fprintf(stderr,"Span have only one child\n");
				goto part_mod_err;
			}
		}else{
			fprintf(stderr,"Span have no child\n");
			goto part_mod_err;
		}
	}else if(spec->symbol->id != id_Integer){
		fprintf(stderr,"Part specification "); 
		FullForm_mod2(stderr,spec);
		fprintf(stderr,"is neither a machine-sized integer nor a list of machine-sized integers\n");
		goto part_mod_err;
	}else{
		is = ie = Integer_toInt(spec);
		if(is==0){
			if(main->child){
				rtn=Expr_appendChild(rtn,Expr_copy(main));
				goto part_mod_end;
			}else{
				switch(main->symbol->id){
				  case id_Integer:
				  case id_Real:
				  case id_String:
					rtn=Expr_appendChild(rtn,Expr_create(main->symbol->id));
					goto part_mod_end;
				  default:
					rtn=Expr_appendChild(rtn,Expr_create(id_Symbol));
					goto part_mod_end;
				}
			}
		}
	}
	if(abs(is) > len){
			fprintf(stderr,"Part %d of ",is);
			FullForm_mod2(stderr,main);
			fprintf(stderr," does not exist.\n");
			goto part_mod_err;
		}
	if(is<0){is=ie=is+len;}
	incr = 1;
	//fprintf(stderr,"len : %d\n",len);
	//fprintf(stderr,"is : %d\n",is);
	//fprintf(stderr,"ie : %d\n",ie);
	for(m=main->child,i=1;i<=ie;m=m->next,i++){
		if(i<is || (i-is)%incr!=0){continue;}
		if(!m){
			fprintf(stderr,"Cannot take position %d from %d in ",is,ie);
			FullForm_mod2(stderr,main);
			goto part_mod_err;
		}
		//puts("loop");
		if(spec->next){
			rtn=Expr_appendChild(rtn,Part_mod(Expr_create(id_Node),m,spec->next,err));
			if(*err){goto part_mod_err;}
		}else{
			rtn=Expr_appendChild(rtn,Expr_copyRoot(m));
		}
	}
	//TreeForm_mod(rtn);
  part_mod_end:
	*err = 0;
	return rtn;
  part_mod_err:
	*err = 1;
	return rtn;
}
/*
Expr Part_mod(Expr p, int k){
	Expr e;
	for(e=p->child;e && k>1;e=e->next,k--){}
	return e;
}

int Part_mod(Expr *p, int k){
	Expr e;
	int length;
	if(*p==NULL){return pe_partd;}
	if(k==0){
		if((*p)->child){
			*p = Expr_copy(*p);
		}else{
			switch((*p)->symbol->id){
			  case id_Integer:
			  case id_Real:
			  case id_String:
				*p = Expr_create((*p)->symbol->id);
				break;
			  default:
				*p = Expr_create(id_Symbol);
				break;
			}
		}
		return pe_head;
	}
	length = Expr_getLength((*p)->child);
	if(abs(k) > length){return pe_partw;}
	if(k<0){k = length + k;}
	for(*p=(*p)->child;*p && k>1;*p=(*p)->next,k--){}
	return 0;
}

Expr Part_span_mod(Expr expr, int is, int ie, int incr){
	Expr e,rtn;
	int i,k;
	for(i=1,e=expr->child;i<is;i++,e=e->next){
		if(!e){
			fprintf(stderr,"Cannot take position %d from %d in ",is,ie);
			FullForm_mod2(stderr,expr);
			return NULL;
		}
	}
	rtn = Expr_create(id_List);
	for(;i<=ie;){
		if(!e){
			fprintf(stderr,"Cannot take position %d from %d in ",is,ie);
			FullForm_mod2(stderr,expr);
			Expr_deleteRoot(rtn); return NULL;
		}
		rtn = Expr_appendChild(rtn,Expr_copyRoot(e));
		for(k=1;k<=incr && e;k++,i++,e=e->next){}
	}
	return rtn;
}
*/
</SOURCE>
<DOC>
expr[[i]] or Part[expr,i] gives the ith part of expr.
expr[[-i]] counts from the end.
expr[[i,j,...]] or Part[expr,i,j,...] is equivalent to expr[[i]][[j]].... 
expr[[{i1,i2,...}]] gives a list of the parts i1, i2, ... of expr. 
expr[[m;;n]] gives parts m through n.
expr[[m;;n;;s]] gives parts m through n in steps of s.
</DOC>