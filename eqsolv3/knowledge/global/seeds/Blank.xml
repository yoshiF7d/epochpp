<NAME>Blank</NAME>
<PRECEDENCE>730</PRECEDENCE>
<ASSOCIATIVITY>un_pre</ASSOCIATIVITY>
<SIGN>"_"</SIGN>
<ATTRIBUTES>Protected</ATTRIBUTES>
<PROTO>
Expr Blank_pre(Expr expr);
char *Blank_toString(Expr expr);
void Blank_data_init(union un_data *data);
void Blank_data_copy(union un_data *datas, union un_data *datad);
</PROTO>
<SOURCE>
Expr Blank_pre(Expr expr){
	if(!(expr->flag & ef_func) && expr->child){
		expr->data.symbol = expr->child->symbol;
		Expr_delete(expr->child);
		expr->child=NULL;
	}else{
		expr->data.symbol = NULL;
	}
	return expr;
}
char *Blank_toString(Expr expr){
	char *buf=NULL;
	int needed;
	if(expr->data.symbol){
		needed = snprintf(buf,0,"_%s",expr->data.symbol->name);
		buf = allocate(needed+1);
		snprintf(buf,needed+1,"_%s",expr->data.symbol->name);
	}else{
		return String_copy("_");
	}
	return buf;
}
void Blank_data_init(union un_data *data){data->symbol = NULL;}
void Blank_data_copy(union un_data *datas, union un_data *datad){datad->symbol = datas->symbol;}
</SOURCE>
<DOC>
_ or Blank[] is a pattern object that can stand for any expression.
_h or Blank[h] can stand for any expression with head h.
</DOC>
<DATA>
Symbol symbol;
</DATA>